{"version":3,"sources":["components/Statistics/Statistics.styled.js","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.styled.js","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","components/App.jsx","index.js"],"names":["StyledList","styled","ul","StyledStatistic","p","Statistics","good","neutral","bad","total","positivePercentage","StyledButtonsWrapper","div","StyledButton","button","FeedbackOptions","options","onLeaveFeedback","map","option","key","name","onClick","Section","title","children","StyledMessage","Notification","message","App","state","handleIncrement","e","stateKey","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","props","Object","keys","Component","defaultProps","ReactDOM","render","document","querySelector"],"mappings":"ujBAEA,IAAMA,EAAaC,IAAOC,GAAV,KAQVC,EAAkBF,IAAOG,EAAV,KCcNC,EApBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,kBAACV,EAAD,KACE,qCAAWM,GACX,wCAAcC,GACd,oCAAUC,IAEZ,kBAACL,EAAD,eAAyBM,GACzB,kBAACN,EAAD,2BAAqCO,EAArC,O,gdCVJ,IAAMC,EAAuBV,IAAOW,IAAV,KAMpBC,EAAeZ,IAAOa,OAAV,KCWHC,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,kBAACN,EAAD,KACGK,EAAQE,KAAI,SAAAC,GAAM,OACjB,kBAACN,EAAD,CAAcO,IAAKD,EAAQE,KAAMF,EAAQG,QAASL,GAC/CE,QCOMI,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,4BAAKD,GACJC,I,2FCJL,IAAMC,EAAgBzB,IAAOG,EAAV,KCQJuB,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,kBAACF,EAAD,KAAgBE,ICEjCC,E,2MAMnBC,MAAQ,CACNxB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPuB,gBAAkB,SAAAC,GAChB,IAAMC,EAAWD,EAAEE,OAAOb,KAC1B,EAAKc,UAAS,SAAAL,GAAK,sBAChBG,EAAWH,EAAMG,GAAY,O,EAIlCG,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBxB,KADiB,EACXC,QADW,EACFC,K,EAIzB6B,gCAAkC,WAAO,IAC/B/B,EAAS,EAAKwB,MAAdxB,KACR,OAAOgC,KAAKC,MAAc,IAAPjC,EAAc,EAAK8B,uB,wEAG9B,IAAD,EACwBI,KAAKV,MAA5BxB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IADhB,EAEoBgC,KAAKC,MAAxBjB,EAFD,EAECA,MAAOI,EAFR,EAEQA,QAEf,OACE,6BACE,kBAAC,EAAD,CAASJ,MAAOA,GACd,kBAAC,EAAD,CACER,QAAS0B,OAAOC,KAAKH,KAAKV,OAC1Bb,gBAAiBuB,KAAKT,kBAExB,0CACCS,KAAKJ,qBAAuB,EAC3B,kBAAC,EAAD,CACE9B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO+B,KAAKJ,qBACZ1B,mBAAoB8B,KAAKH,oCAG3B,kBAAC,EAAD,CAAcT,QAASA,U,GAlDFgB,aAAZf,EACZgB,aAAe,CACpBrB,MAAO,wBACPI,QAAS,qBCLbkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.72976200.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst StyledList = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n  font-size: 18px;\r\n  line-height: 1.5;\r\n`;\r\n\r\nconst StyledStatistic = styled.p`\r\n  margin: 0;\r\n  font-size: 18px;\r\n  line-height: 1.5;\r\n`;\r\n\r\nexport { StyledList, StyledStatistic };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { StyledList, StyledStatistic } from \"./Statistics.styled\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    <StyledList>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n    </StyledList>\r\n    <StyledStatistic>Total: {total}</StyledStatistic>\r\n    <StyledStatistic>Positive feedback: {positivePercentage}%</StyledStatistic>\r\n  </>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Statistics;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledButtonsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 150px;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  border-radius: 4px;\r\n  border: 1px solid grey;\r\n  background-color: transparent;\r\n  outline: none;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n\r\n  ::first-letter {\r\n    text-transform: uppercase;\r\n  }\r\n\r\n  :hover {\r\n    background-color: #3b4ee0;\r\n  }\r\n`;\r\n\r\nexport { StyledButtonsWrapper, StyledButton };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { StyledButtonsWrapper, StyledButton } from \"./FeedbackOptions.styled\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <StyledButtonsWrapper>\r\n    {options.map(option => (\r\n      <StyledButton key={option} name={option} onClick={onLeaveFeedback}>\r\n        {option}\r\n      </StyledButton>\r\n    ))}\r\n  </StyledButtonsWrapper>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledMessage = styled.p`\r\n  font-size: 18px;\r\n`;\r\n\r\nexport { StyledMessage };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { StyledMessage } from \"./Notification.styled\";\r\n\r\nconst Notification = ({ message }) => <StyledMessage>{message}</StyledMessage>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport Statistics from \"./Statistics/Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions/FeedbackOptions\";\r\nimport Section from \"./Section/Section\";\r\nimport Notification from \"./Notification/Notification\";\r\n\r\nexport default class App extends Component {\r\n  static defaultProps = {\r\n    title: \"Please leave feedback\",\r\n    message: \"No feedback given\"\r\n  };\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n  };\r\n\r\n  handleIncrement = e => {\r\n    const stateKey = e.target.name;\r\n    this.setState(state => ({\r\n      [stateKey]: state[stateKey] + 1\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good } = this.state;\r\n    return Math.round((good * 100) / this.countTotalFeedback());\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const { title, message } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Section title={title}>\r\n          <FeedbackOptions\r\n            options={Object.keys(this.state)}\r\n            onLeaveFeedback={this.handleIncrement}\r\n          />\r\n          <h2>Statistics</h2>\r\n          {this.countTotalFeedback() > 0 ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          ) : (\r\n            <Notification message={message} />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}